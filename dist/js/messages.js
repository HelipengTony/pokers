/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/messages.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/css/main.css":
/*!***************************!*\
  !*** ./dist/css/main.css ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//# sourceURL=webpack:///./dist/css/main.css?");

/***/ }),

/***/ "./node_modules/_ant-design-vue@1.3.17@ant-design-vue/dist/antd.css":
/*!**************************************************************************!*\
  !*** ./node_modules/_ant-design-vue@1.3.17@ant-design-vue/dist/antd.css ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//# sourceURL=webpack:///./node_modules/_ant-design-vue@1.3.17@ant-design-vue/dist/antd.css?");

/***/ }),

/***/ "./src/messages.js":
/*!*************************!*\
  !*** ./src/messages.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dist_css_main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/css/main.css */ \"./dist/css/main.css\");\n/* harmony import */ var _dist_css_main_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_dist_css_main_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ant_design_vue_dist_antd_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ant-design-vue/dist/antd.css */ \"./node_modules/_ant-design-vue@1.3.17@ant-design-vue/dist/antd.css\");\n/* harmony import */ var ant_design_vue_dist_antd_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ant_design_vue_dist_antd_css__WEBPACK_IMPORTED_MODULE_1__);\n//引入 css 文件\n\n\n\nvar antd = new Vue({\n    el: '#app',\n    data() {\n        return {\n            lang: [],\n            ws: null,\n            ws_status: 'fi',\n            md: null,\n            user: {\n                id: parseInt(cookie.get('logged_in_id')),\n                joined_classes: [],\n                classes_info: [],\n                info: []\n            },\n            spinning: {\n                left: true,\n                center: false,\n                right: false,\n                loading: true,\n                drawer: false\n            },\n            display_classes: true,\n            display_classes_text: 'Hide All',\n            status: {\n                mark: false,\n                chat: false,\n                user: false,\n                thread: false,\n                info: false\n            },\n            opened_mark_info: {\n                user: null,\n                class_c: null,\n                user_info: [],\n                class_info: []\n            },\n            opened_member_info: {\n                status: 0,\n                info: null\n            },\n            opened_class_info: {\n                id: null,\n                superid: null,\n                index: null,\n                logs: [],\n                members: []\n            },\n            opened_thread_info: [],\n            thread_info: {\n                pinned: {\n                    id: null,\n                    mes: null,\n                    index: null\n                },\n                reported: null\n            },\n            member_marked: false,\n            class_marked: false,\n            mark: {\n                id: null\n            },\n            add: {\n                visible: false,\n                visible_thread: false,\n                confirm_join_loading: false,\n                join: {\n                    id: null\n                },\n                thread: {\n                    id: null,\n                    name: null\n                }\n            },\n            opened_mes_info: { //打开内容列表\n                thread_id: null,\n                thread_info: [],\n                class_id: null,\n                meses: [],\n                speakers: [], //每段内容对应的发送者头像\n                unique_speakers: [], //去重后的总参与人数\n                index: null,\n                logs: []\n            },\n            mes_input: { //发送内容框\n                text: 'Add a comment...',\n                rows: 1,\n                op_display: false, //选项\n                container: 'mes-container-normal', //聚焦和失焦时展示不同 class\n                input: 'mes-input-normal',\n                content: null, //内容框内容\n                disable: false, //屏蔽内容框修改\n                type: 'text',\n                visible: { //上传图片、文件的 tooltip\n                    picture: false,\n                    upload: false,\n                    text: true\n                },\n                token: null, //上传文件的 token\n                file_progress: false, //上传进度条展示\n                img_progress: false,\n                progress_file: 0, //进度\n                progress_img: 0,\n                img: { //图片上传内容\n                    url: null\n                },\n                file: { //文件上传内容\n                    url: null,\n                    name: null,\n                    size: null,\n                },\n                send_text: 'Send', //在图片上传时会改变 send 按钮文字\n                markdown: { //支持 markdown 格式的发送\n                    status: false,\n                    html: null,\n                    btn: 'default'\n                }\n            },\n            view: {\n                visible: false,\n                info: null\n            },\n            edit: {\n                visible: false,\n                name: null,\n                confirm_edit_loading: false,\n                mes: {\n                    mes_id: null,\n                    visible: false,\n                    content: null,\n                    confirm_edit_mes_loading: false,\n                    count_id: null\n                }\n            },\n            emoji_added_count: 0,\n            emoji_removed_count: 0,\n            unread: {\n                visible: false\n            },\n            office: {\n                visible: false,\n                title: null,\n                url: null\n            },\n            guide: {\n                visible: false,\n                step: 1,\n                title: 'Terms of Service'\n            },\n            enter: {\n                status: false,\n                text: 1\n            },\n            check: {\n                file: {\n                    status: false\n                },\n                img: {\n                    status: false\n                }\n            },\n            push: {\n                info: [],\n                classid: null,\n                thread: null,\n                key: []\n            },\n            log: {\n                visible: false,\n                visible_class: false\n            },\n            delete_mes: {\n                id: null,\n                index: null\n            },\n            wss_connected: false\n        }\n    },\n    mounted() {\n        this.lang = lang_json;\n        axios.get('../interact/select_users.php?type=name&id=' + parseInt(cookie.get('logged_in_id')) + '&form=all')\n            .then(re => {\n                this.user.info = re.data[0];\n                this.user.id = parseInt(this.user.info.id);\n                axios.get('../interact/get_token.php?user=' + this.user.id + '&email=' + this.user.info.email)\n                    .then(res => {\n                        this.mes_input.token = res.data.key;\n                    })\n                if (!!re.data[0].class) {\n                    this.user.joined_classes = re.data[0].class.split(',');\n                    axios.get('../interact/select_classes.php?type=class&id=' + re.data[0].class + '&form=all')\n                        .then(res => {\n                            this.user.classes_info = res.data;\n                            this.spinning.left = false;\n                        })\n                } else {\n                    //若不存在班级信息\n                    this.spinning.left = false;\n                }\n                $('#main-container').attr('style', ''); //避免爆代码\n            });\n        //md 函数初始化\n        this.md = window.markdownit({\n            html: true,\n            xhtmlOut: false,\n            breaks: true,\n            linkify: true\n        });\n\n        //新用户引导信息\n        if (cookie.get('pokers_intro') !== 'done') {\n            this.guide.visible = true;\n            cookie.set('pokers_intro', 'done');\n        }\n\n        //新消息推送\n        var func_push = function () {\n            antd.check_push();\n        }\n        window.get_push_interval = setInterval(func_push, 10000);\n\n        /* WebSocket 开始 */\n        function reconnect_wss() {\n            //websocket 连接\n            window.ws = new WebSocket('ws://localhost/wss');\n            window.ws.onmessage = function (data) {\n                var re = eval('(' + data.data + ')');\n                switch (re.op) {\n                    //创建 wss 连接\n                    case 'connect':\n                        console.log('Connected to Eugrade Server');\n                        antd.wss_connected = true;\n                        break;\n                        //加入 wss 连接\n                    case 'join':\n                        if (!re.status) {\n                            antd.$message.error('Service Unavailable');\n                        }\n                        break;\n                        //删除内容(count_id 为内容条段数)\n                    case 'delete':\n                        var mes = antd.opened_mes_info.meses;\n                        if (re.status && (parseInt(re.count_id - 1) < mes.length)) {\n                            antd.opened_mes_info.meses.splice(re.count_id - 1, 1);\n                        } else {\n                            antd.$message.error('Faild to delete');\n                        }\n                        break;\n                        //emoji 增加\n                    case 'emoji_add':\n                        var mes = antd.opened_mes_info.meses;\n                        if (re.status && (parseInt(re.count_id - 1) < mes.length)) {\n                            var emo = 'emoji_' + parseInt(re.emoji_id);\n                            antd.opened_mes_info.meses[parseInt(re.count_id - 1)][emo] += 1;\n                        } else {\n                            antd.$message.error('Faild to add emoji');\n                        }\n                        break;\n                        //emoji 删除\n                    case 'emoji_remove':\n                        var mes = antd.opened_mes_info.meses;\n                        if (re.status && (parseInt(re.count_id - 1) < mes.length)) {\n                            var emo = 'emoji_' + parseInt(re.emoji_id);\n                            antd.opened_mes_info.meses[parseInt(re.count_id - 1)][emo] -= 1;\n                        } else {\n                            antd.$message.error('Faild to remove emoji');\n                        }\n                        break;\n                        //编辑内容(不采用 wss，直接请求服务器)\n                    case 'edit':\n                        antd.load_mes();\n                        break;\n                    default: //内容更新\n                        if (\"undefined\" == typeof re.status) {\n                            //在内容段后添加一段\n                            antd.opened_mes_info.meses.push(re);\n                            if (parseInt(re.speaker) !== parseInt(antd.user.id)) {\n                                if ($(window).height() + $('#mes-container').scrollTop() >= $('#mes-inner').height()) {\n                                    //当前窗口可视区域+滑动距离大于总可滑动高度,有更新直接到底部\n                                    antd.bottom_mes();\n                                } else {\n                                    antd.unread.visible = true;\n                                    setTimeout(function () {\n                                        antd.unread.visible = false;\n                                    }, 1000);\n                                }\n                            }\n                            antd.update_mes();\n                            antd.opened_thread_info[antd.opened_mes_info.index].message_count++;\n                        } else {\n                            antd.load_mes();\n                        }\n                        break;\n                }\n            };\n\n            window.ws.onclose = function () {\n                antd.ws_status = 're';\n                reconnect_wss();\n            };\n\n            window.ws.onopen = function () {\n                if (antd.ws_status == 're') {\n                    window.ws.send('{\"action\":\"join\", \"thread_id\":' + antd.opened_mes_info.thread_id + ', \"class_id\":' + antd.opened_mes_info.class_id + ', \"speaker\":' + antd.user.id + ',\"speaker_name\":\"' + antd.user.info.name + '\",\"type\" : \"join\"}');\n                }\n            };\n        }\n        reconnect_wss();\n        /* WebSocket 结束 */\n\n    },\n    methods: {\n        //判断是否为班级管理员，输出特殊样式\n        class_super(index) {\n            if (parseInt(this.user.classes_info[index].super) == this.user.id) {\n                return 'super';\n            } else {\n                return '';\n            }\n        },\n        //创建/加入新班级后重新加载列表\n        get_all_classes() {\n            axios.get('../interact/select_users.php?type=class&id=' + cookie.get('logged_in_id') + '&form=single')\n                .then(re => {\n                    this.user.joined_classes = re.data.class.split(',');\n                    if (!!re.data.class) {\n                        axios.get('../interact/select_classes.php?type=class&id=' + re.data.class + '&form=all')\n                            .then(res => {\n                                this.user.classes_info = res.data;\n                                this.spinning.left = false;\n                            })\n                    } else {\n                        this.user.joined_classes = [];\n                        this.user.classes_info = [];\n                    }\n                });\n        },\n        display_class() {\n            if (this.display_classes_text == 'View All') {\n                this.display_classes_text = 'Hide All';\n                this.display_classes = true;\n            } else {\n                this.display_classes_text = 'View All';\n                this.display_classes = false;\n            }\n        },\n        open_marks() {\n            this.spinning.center = true;\n            axios.get('../interact/select_marks.php?form=user&marker=' + this.user.id)\n                .then(res => {\n                    this.opened_mark_info.user = res.data;\n                    axios.get('../interact/select_users.php?type=name&form=all&id=' + this.opened_mark_info.user.combine)\n                        .then(res => {\n                            this.opened_mark_info.user_info = res.data;\n                        })\n                    axios.get('../interact/select_marks.php?form=class&marker=' + this.user.id)\n                        .then(res => {\n                            this.opened_mark_info.class_c = res.data;\n                            axios.get('../interact/select_classes.php?type=name&form=all&id=' + this.opened_mark_info.class_c.combine)\n                                .then(res => {\n                                    this.status.thread = false;\n                                    this.opened_mark_info.class_info = res.data;\n                                })\n                            this.status.mark = true;\n                            this.spinning.center = false;\n                        })\n                })\n        },\n        //获取用户类型\n        get_level(type) {\n            if (parseInt(type) == 1) {\n                return 'Student';\n            } else {\n                return 'Teacher';\n            }\n        },\n        //转换时间戳为时间格式\n        get_date(timeStamp) {\n            var date = new Date();\n            date.setTime(timeStamp * 1000);\n            var y = date.getFullYear();\n            var m = date.getMonth() + 1;\n            m = m < 10 ? ('0' + m) : m;\n            var d = date.getDate();\n            d = d < 10 ? ('0' + d) : d;\n            var h = date.getHours();\n            h = h < 10 ? ('0' + h) : h;\n            var minute = date.getMinutes();\n            var second = date.getSeconds();\n            minute = minute < 10 ? ('0' + minute) : minute;\n            second = second < 10 ? ('0' + second) : second;\n            return y + '-' + m + '-' + d + ' ' + h + ':' + minute + ':' + second;\n        },\n        //通过时间戳只获取年月日\n        get_date_d(timeStamp) {\n            var date = new Date();\n            date.setTime(timeStamp * 1000);\n            var y = date.getFullYear();\n            var m = date.getMonth() + 1;\n            m = m < 10 ? ('0' + m) : m;\n            var d = date.getDate();\n            d = d < 10 ? ('0' + d) : d;\n            return y + '-' + m + '-' + d;\n        },\n        //转换时间戳为分秒时时间格式\n        get_time(timeStamp) {\n            var date = new Date();\n            date.setTime(timeStamp * 1000);\n            var h = date.getHours();\n            h = h < 10 ? ('0' + h) : h;\n            var minute = date.getMinutes();\n            var second = date.getSeconds();\n            minute = minute < 10 ? ('0' + minute) : minute;\n            second = second < 10 ? ('0' + second) : second;\n            return h + ':' + minute + ':' + second;\n        },\n        //今日与之前的内容段展示不同的日期格式\n        get_mes_date(timeStamp) {\n            //发送于今日\n            if (this.get_date_d(timeStamp) == this.get_date_d(Math.round(new Date().getTime() / 1000))) {\n                return this.get_time(timeStamp);\n            } else { //未在今日\n                return this.get_date(timeStamp);\n            }\n        },\n        //点击用户获取信息在 right 列展示\n        open_user(id) {\n            //选中增加 class，删除其余选中\n            $('.center .class-item').each(function () {\n                $(this).removeClass('clicked');\n            });\n            $('#member' + id).addClass('clicked');\n\n            this.spinning.right = true;\n            axios.get('../interact/select_users.php?type=name&form=all&id=' + id)\n                .then(resp => {\n                    this.opened_member_info.info = resp.data[0];\n                    this.status.user = true;\n                    this.check_mark(this.opened_member_info.info.id, 'user'); //判断是否收藏用户\n                    this.spinning.right = false;\n                    this.edit.user.id = this.opened_member_info.info.id;\n                    this.edit.user.name = this.opened_member_info.info.name;\n                    this.edit.user.email = this.opened_member_info.info.email;\n                    this.edit.user.avatar = this.opened_member_info.info.avatar;\n                })\n        },\n        //点击班级获取主题在 center 列展示\n        open_class(id, index, push) {\n\n            this.close_all_status();\n            //选中增加 class，删除其余选中\n            $('.left .class-item').each(function () {\n                $(this).removeClass('clicked');\n            });\n            $('.center .class-item').each(function () {\n                $(this).removeClass('clicked');\n            });\n            $('#class_left' + id).addClass('clicked');\n\n            this.opened_class_info.id = id;\n            if (!push) {\n                if (!!index || index == 0) {\n                    this.opened_class_info.index = index;\n                }\n                this.opened_class_info.superid = this.user.classes_info[parseInt(index)].super;\n            }\n            this.spinning.center = true;\n            axios.get('../interact/select_classes.php?type=member&id=' + id + '&form=single')\n                .then(res => {\n                    this.opened_class_info.members = res.data.member.split(',');\n                });\n            axios.get('../interact/select_thread.php?class_id=' + id)\n                .then(resp => {\n                    this.status.mark = false;\n                    this.opened_thread_info = resp.data;\n                    this.status.thread = true;\n                    this.spinning.center = false;\n                    this.push.classid = null;\n                })\n        },\n\n\n\n        //点击主题获取消息在 right 列展示\n        open_mes(index, id, belong_class) {\n\n            if (this.wss_connected) {\n                window.ws.send('{\"action\":\"join\", \"thread_id\":' + id + ', \"class_id\":' + belong_class + ', \"speaker\":' + antd.user.id + ',\"speaker_name\":\"' + antd.user.info.name + '\",\"type\" : \"join\"}');\n                //清除当前 interval\n                window.clearInterval(window.get_push_interval);\n\n                //关闭当前 push 通知\n                this.push.classid = null;\n                this.push.thread = null;\n\n                this.spinning.loading = true;\n                this.status.user = false;\n                this.status.chat = true;\n                //选中增加 class，删除其余选中\n                $('.center .class-item').each(function () {\n                    $(this).removeClass('clicked');\n                });\n                $('#thread_sub' + id).addClass('clicked');\n\n                this.opened_mes_info.thread_id = id;\n                this.opened_mes_info.class_id = belong_class;\n                this.opened_mes_info.thread_info = this.opened_thread_info[index];\n                this.opened_mes_info.index = index;\n                this.edit.name = this.opened_mes_info.thread_info.name;\n\n                axios.get('../interact/select_messages.php?thread_id=' + this.opened_mes_info.thread_id + '&class_id=' + this.opened_mes_info.class_id)\n                    .then(response => {\n                        this.opened_mes_info.meses = response.data.mes;\n                        if (!!response.data.speakers_unique) {\n                            this.opened_mes_info.unique_speakers = response.data.speakers_unique.split(',');\n                        } else {\n                            this.opened_mes_info.unique_speakers = [];\n                        }\n                        axios.get('../interact/select_users.php?type=avatar&id=' + response.data.speakers_unique + '&mes=1')\n                            .then(res => {\n                                this.opened_mes_info.speakers = res.data;\n\n                                //新消息推送 cookie 设置\n                                if (!!cookie.get('pokers_push') && !!cookie.get('pokers_thread_count')) {\n                                    if (cookie.get('pokers_push').split('a').indexOf(id.toString()) < 0) {\n                                        var push = cookie.get('pokers_push') + 'a' + id;\n                                        var count = cookie.get('pokers_thread_count') + 'a' + this.opened_mes_info.thread_info.message_count;\n                                        cookie.set('pokers_push', push);\n                                        cookie.set('pokers_thread_count', count);\n                                    }\n                                } else {\n                                    cookie.set('pokers_push', id);\n                                    cookie.set('pokers_thread_count', this.opened_mes_info.thread_info.message_count);\n                                }\n\n                                //判断顶置\b信息\n                                if (!!this.opened_thread_info[index].pin) {\n                                    this.thread_info.pinned.id = this.opened_thread_info[index].pin;\n                                    axios.get('../interact/select_messages.php?thread_id=' + this.opened_mes_info.thread_id + '&class_id=' + this.opened_mes_info.class_id + '&mes_id=' + this.thread_info.pinned.id + '&type=single')\n                                        .then(resp => {\n                                            this.thread_info.pinned.mes = resp.data[index].content;\n                                        })\n                                } else {\n                                    this.close_pin('key'); //清除顶置\n                                }\n                                this.spinning.loading = false;\n                            })\n                    })\n\n                //数据更新\n                antd.update_mes();\n                var func_push = function () {\n                    antd.check_push();\n                }\n                window.get_push_interval = setInterval(func_push, 10000);\n            } else {\n                this.$message.error('Please wait while we connect to messages server');\n            }\n        },\n\n\n\n        //判断当前展示用户是否被标记\n        check_mark(id, type) {\n            if (type == 'user') {\n                axios.get('../interact/select_marks.php?form=user&marker=' + this.user.id)\n                    .then(res => {\n                        this.member_marked = false; //.user 在数组为空时无法获取,直接初始值 false\n                        if (!!res.data[id.toString()].user) {\n                            this.member_marked = true;\n                        } else {\n                            this.member_marked = false;\n                        }\n                    })\n            } else {\n                axios.get('../interact/select_marks.php?form=class&marker=' + this.user.id)\n                    .then(res => {\n                        this.class_marked = false; //.class 在数组为空时无法获取,直接初始值 false\n                        if (!!res.data[id.toString()].class) {\n                            this.class_marked = true;\n                        } else {\n                            this.class_marked = false;\n                        }\n                    })\n            }\n        },\n        //标记收藏\n        mark_process(id, type) {\n            this.mark.id = id;\n            if (type == 'user') {\n                this.$confirm({\n                    title: 'Do you want to mark this student?',\n                    content: 'you can remove the mark by clicking the button again',\n                    onOk() {\n                        var query_string = \"type=user&stu_id=\" + antd.mark.id + \"&marker=\" + antd.user.id;\n\n                        axios.post(\n                                '../interact/create_mark.php',\n                                query_string\n                            )\n                            .then(res => {\n                                if (res.data.status) {\n                                    antd.$message.success(res.data.mes);\n                                    antd.check_mark(antd.opened_member_info.info.id, 'user');\n                                    antd.open_marks();\n                                } else {\n                                    antd.$message.error(res.data.mes);\n                                }\n                            })\n\n                    }\n                })\n            } else {\n                this.$confirm({\n                    title: 'Do you want to mark this class?',\n                    content: 'you can remove the mark later',\n                    onOk() {\n                        var query_string = \"type=class&class_id=\" + antd.mark.id + \"&marker=\" + antd.user.id;\n\n                        axios.post(\n                                '../interact/create_mark.php',\n                                query_string\n                            )\n                            .then(res => {\n                                if (res.data.status) {\n                                    antd.$message.success(res.data.mes);\n                                    antd.check_mark(antd.opened_member_info.info.id, 'class');\n                                    antd.open_marks();\n                                } else {\n                                    antd.$message.error(res.data.mes);\n                                }\n                            })\n\n                    }\n                })\n            }\n        },\n        //删除标记\n        demark_process(id, type) {\n            this.mark.id = id;\n            if (type == 'user') {\n                this.$confirm({\n                    title: 'Do you want to remove the mark of this student?',\n                    content: 'you can mark back by clicking the button again',\n                    onOk() {\n                        var query_string = \"type=user&stu_id=\" + antd.mark.id + \"&marker=\" + antd.user.id;\n\n                        axios.post(\n                                '../interact/delete_mark.php',\n                                query_string\n                            )\n                            .then(res => {\n                                if (res.data.status) {\n                                    antd.$message.success(res.data.mes);\n                                    antd.check_mark(antd.opened_member_info.info.id, 'user');\n                                    antd.open_marks();\n                                } else {\n                                    antd.$message.error(res.data.mes);\n                                }\n                            })\n\n\n                    }\n                })\n            } else {\n                this.$confirm({\n                    title: 'Do you want to remove the mark of this class?',\n                    content: 'you are able to mark back',\n                    onOk() {\n\n                        var query_string = \"type=class&class_id=\" + antd.mark.id + \"&marker=\" + antd.user.id;\n\n                        axios.post(\n                                '../interact/delete_mark.php',\n                                query_string\n                            )\n                            .then(res => {\n                                if (res.data.status) {\n                                    antd.$message.success(res.data.mes);\n                                    antd.check_mark(antd.opened_class_info.id, 'class');\n                                    antd.open_marks();\n                                } else {\n                                    antd.$message.error(res.data.mes);\n                                }\n                            })\n\n\n                    }\n                })\n            }\n\n        },\n        //显示加入/创建班级的 modal\n        add_class() {\n            this.add.visible = true;\n        },\n        //关闭 modal\n        handle_create_cancel() {\n            this.add.visible = false\n        },\n        //处理加入班级\n        handle_join_submit() {\n            this.add.confirm_join_loading = true;\n\n            var query_string = \"class_id=\" + this.add.join.id + \"&stu_id=\" + this.user.id;\n\n            axios.post(\n                    '../interact/join_classes.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.add.confirm_join_loading = false;\n                        this.handle_create_cancel();\n                        this.get_all_classes();\n                        this.add.join.id = null;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.add.confirm_join_loading = false;\n                    }\n                })\n\n\n        },\n        //关闭 modal\n        handle_thread_cancel() {\n            this.add.visible_thread = false;\n        },\n        //处理加入班级\n        handle_thread_submit(id) {\n            this.add.confirm_thread_loading = true;\n            this.add.thread.id = id;\n\n            var query_string = \"belong_class=\" + this.add.thread.id + \"&name=\" + this.add.thread.name + \"&creator=\" + this.user.id;\n\n            axios.post(\n                    '../interact/create_thread.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.add.confirm_thread_loading = false;\n                        axios.get('../interact/select_thread.php?class_id=' + this.opened_class_info.id)\n                            .then(resp => {\n                                this.opened_thread_info = resp.data;\n                            })\n                        this.handle_thread_cancel();\n                        this.add.thread.id = null;\n                        this.add.thread.name = null;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.add.confirm_thread_loading = false;\n                    }\n                })\n\n\n        },\n        //获取输入框焦点回调函数\n        handle_input_up() {\n            this.mes_input.rows = 3;\n            this.mes_input.op_display = true;\n            this.mes_input.container = 'mes-container';\n            this.mes_input.input = 'mes-input';\n            this.bottom_mes();\n            //输入框监听回车发送\n            if (parseInt(cookie.get('pokers_sending')) == 2) {\n                $(\"#message_input\").unbind();\n                $(\"#message_input\").bind(\"keydown\", function (e) {\n                    // 兼容FF和IE和Opera    \n                    var theEvent = e || window.event;\n                    var code = theEvent.keyCode || theEvent.which || theEvent.charCode;\n                    if (code == 13) {\n                        antd.handle_input_send(antd.mes_input.type);\n                    }\n                });\n                this.enter.status = true;\n                this.enter.text = 2;\n            }\n        },\n        //discard 按钮\n        handle_input_down() {\n            this.mes_input.rows = 1;\n            this.mes_input.op_display = false;\n            this.mes_input.container = 'mes-container-normal';\n            this.mes_input.input = 'mes-input-normal';\n            this.handle_cancel_upload();\n        },\n        //发送内容\n        handle_input_send(type) {\n            this.mes_input.text = 'Sending...';\n            this.mes_input.disable = true;\n\n            var query_string = \"speaker=\" + this.user.id + \" &speaker_name=\" + encodeURIComponent(this.user.info.name) + \" &belong_class=\" + this.opened_mes_info.class_id + \" &thread=\" + this.opened_mes_info.thread_id;\n\n            if (type == 'img') {\n                if (!!this.mes_input.img.url) {\n                    query_string = query_string + '&img_url=' + encodeURIComponent(this.mes_input.img.url);\n                    if (this.mes_input.markdown.status) {\n                        if (!!this.mes_input.content) {\n                            var content = this.md.render(this.mes_input.content);\n                            query_string = query_string + '&content=' + encodeURIComponent(content);\n                        }\n                    } else {\n                        if (!!this.mes_input.content) {\n                            var content = this.mes_input.content;\n                            query_string = query_string + '&content=' + encodeURIComponent(content);\n                        }\n                    }\n                    this.mes_input.type = 'text';\n                    query_string = query_string + \"&type=\" + this.mes_input.type;\n                    status = 1;\n                } else {\n                    status = 0;\n                }\n            } else if (type == 'file') {\n                if (!!this.mes_input.file.url && !!this.mes_input.file.name) {\n                    query_string = query_string + '&size=' + encodeURIComponent(this.mes_input.file.size + 'MB') + '&file_url=' + encodeURIComponent(this.mes_input.file.url) + '&file_name=' + encodeURIComponent(this.mes_input.file.name);\n                    this.mes_input.type = 'file';\n                    query_string = query_string + \"&type=\" + this.mes_input.type;\n                    status = 1;\n                } else {\n                    status = 0;\n                }\n            } else {\n                if (!!this.mes_input.content) {\n                    if (this.mes_input.markdown.status) {\n                        var content = this.md.render(this.mes_input.content);\n                        query_string = query_string + '&content=' + encodeURIComponent(content);\n                    } else {\n                        var content = this.mes_input.content;\n                        query_string = query_string + '&content=' + encodeURIComponent(content);\n                    }\n                    this.mes_input.type = 'text';\n                    query_string = query_string + \"&type=\" + this.mes_input.type;\n                    status = 1;\n                } else {\n                    status = 0;\n                }\n            }\n\n            if (status) {\n\n                axios.post(\n                        '../interact/add_message.php',\n                        query_string\n                    )\n                    .then(res => {\n                        if (res.data.status) {\n\n                            //广播全 thread 在线用户\n                            window.ws.send('{\"action\":\"send\", \"thread_id\":' + antd.opened_mes_info.thread_id + ', \"class_id\":' + antd.opened_mes_info.class_id + ', \"speaker\":' + antd.user.id + ',\"speaker_name\":\"' + antd.user.info.name + '\",\"mes_id\":' + res.data.code + ',\"type\" : \"message\"}');\n\n                            this.mes_input.content = null;\n                            this.mes_input.disable = false;\n                            this.handle_cancel_upload();\n                            this.opened_thread_info[this.opened_mes_info.index].message_count++;\n                            this.bottom_mes();\n                            this.mes_input.text = 'Add a comment...';\n                        } else {\n                            this.$message.error(res.data.mes);\n                            this.mes_input.disable = false;\n                            this.handle_cancel_upload();\n                            this.mes_input.text = 'Add a comment...';\n                        }\n                        this.push_add_one(); //cookie 中当前 thread 消息数加一\n                    })\n\n\n            } else {\n                this.$message.error('Illegal request');\n                this.mes_input.text = 'Add a comment...';\n            }\n        },\n        //更新内容列表(按照最后一段内容唯一 id 判断是否需要更新并滑动到底部)\n        update_mes() {\n            axios.get('../interact/select_messages.php?thread_id=' + this.opened_mes_info.thread_id + '&class_id=' + this.opened_mes_info.class_id)\n                .then(response => {\n                    this.opened_mes_info.meses = response.data.mes;\n                    this.opened_mes_info.unique_speakers = response.data.speakers_unique.split(',');\n                    axios.get('../interact/select_users.php?type=avatar&id=' + response.data.speakers_unique + '&mes=1')\n                        .then(res => {\n                            this.opened_mes_info.speakers = res.data;\n                        })\n                })\n        },\n        load_mes() {\n            axios.get('../interact/select_messages.php?thread_id=' + this.opened_mes_info.thread_id + '&class_id=' + this.opened_mes_info.class_id)\n                .then(response => {\n                    this.opened_mes_info.meses = response.data.mes;\n                })\n        },\n        //滑动到内容列表底部\n        bottom_mes() {\n            $(\"#mes-container\").scrollTop($(\"#mes-inner\")[0].scrollHeight);\n            this.unread.visible = false;\n        },\n        //上传文件(不可存在内容，上传后自动发送)\n        upload_file() {\n            if ($(\"#upload_file\")[0].files[0] !== undefined) {\n                if ($(\"#upload_file\")[0].files[0].size <= 50000000) {\n\n                    this.mes_input.file.size = (($(\"#upload_file\")[0].files[0].size / 1024) / 1024).toFixed(2);\n                    this.mes_input.visible.text = false;\n                    this.mes_input.file_progress = true;\n                    this.mes_input.disable = true;\n                    this.mes_input.type = 'file';\n\n                    var pre_name = new Date().getTime();\n                    var suffix = this.get_suffix($(\"#upload_file\")[0].files[0].name);\n                    var name = pre_name + suffix;\n\n                    this.mes_input.file.name = $(\"#upload_file\")[0].files[0].name;\n                    this.mes_input.file.url = 'https://static.ouorz.com/' + name;\n\n                    var config = {\n                        useCdnDomain: true\n                    };\n\n                    var token = this.mes_input.token;\n\n                    var file = $(\"#upload_file\")[0].files[0];\n                    var observable = qiniu.upload(file, name, token, config)\n                    var observer = {\n                        next(res) {\n                            antd.mes_input.progress_file = Math.round(res.total.percent);\n                        },\n                        error(err) {\n                            antd.$message.error(err.message);\n                            antd.mes_input.file_progress = false;\n                        },\n                        complete(res) {\n                            antd.handle_input_send('file');\n                            antd.handle_cancel_upload();\n                            $(\"#upload_file\").val(''); //清空文件选择\n                            antd.mes_input.visible.text = true;\n                        }\n                    }\n                    var subscription = observable.subscribe(observer);\n                } else {\n                    antd.$message.error('This file exceeded 50MB upload limit');\n                }\n            } else {\n                antd.$message.error('No file selected');\n            }\n        },\n        //上传图片(可继续增加内容，上传后不直接发送)\n        upload_img() {\n            if ($(\"#upload_img\")[0].files[0] !== undefined) {\n                if ($(\"#upload_img\")[0].files[0].size <= 20000000) {\n\n                    this.mes_input.img_progress = true;\n                    this.mes_input.type = 'img';\n\n                    var pre_name = new Date().getTime();\n                    var suffix = this.get_suffix($(\"#upload_img\")[0].files[0].name);\n                    var name = pre_name + suffix;\n\n                    this.mes_input.img.url = 'https://static.ouorz.com/' + name;\n\n                    var config = {\n                        useCdnDomain: true\n                    };\n\n                    var putExtra = {\n                        mimeType: [\"image/png\", \"image/jpeg\", \"image/gif\"]\n                    };\n\n                    var token = this.mes_input.token;\n\n                    var file = $(\"#upload_img\")[0].files[0];\n                    var observable = qiniu.upload(file, name, token, putExtra, config)\n                    var observer = {\n                        next(res) {\n                            antd.mes_input.progress_img = Math.round(res.total.percent);\n                        },\n                        error(err) {\n                            antd.$message.error(err.message);\n                            antd.mes_input.img_progress = false;\n                        },\n                        complete(res) {\n                            antd.$message.success('Successfully uploaded an image');\n                            antd.mes_input.img_progress = false;\n                            $(\"#upload_img\").val('');\n                            antd.mes_input.send_text = 'Send(with an image)';\n                        }\n                    }\n                    var subscription = observable.subscribe(observer);\n                } else {\n                    antd.$message.error('This file exceeded 20MB upload limit');\n                }\n            } else {\n                antd.$message.error('No file selected');\n            }\n        },\n        //获取文件后缀\n        get_suffix(name) {\n            var index = name.lastIndexOf('.');\n            return name.substring(index);\n        },\n        //取消上传文件\n        handle_cancel_upload() {\n            this.mes_input.type = 'text';\n            this.mes_input.disable = false;\n            this.mes_input.file_progress = false;\n            this.mes_input.img_progress = false;\n            this.mes_input.progress_file = 0;\n            this.mes_input.progress_img = 0;\n            this.mes_input.file.name = null;\n            this.mes_input.file.url = null;\n            this.mes_input.file.size = null;\n            this.mes_input.img.url = null;\n            this.mes_input.send_text = 'Send';\n            $(\"#upload_img\").val('');\n            $(\"#upload_file\").val('');\n            this.mes_input.markdown.status = false;\n            this.mes_input.markdown.btn = 'default';\n            this.check.file.status = false;\n            this.check.img.status = false;\n            this.mes_input.visible.text = true;\n        },\n        //获取文件格式的内容段图标、颜色\n        get_file_icon(name) {\n            switch (name) {\n                case 'pdf':\n                    return new Array('pdf', 'rgb(233, 30, 99)');\n                    break;\n                case 'md':\n                    return new Array('markdown', 'rgb(0, 150, 136)');\n                    break;\n                case 'jpeg':\n                    return new Array('jpg', 'rgb(233, 30, 99)');\n                    break;\n                case 'jpg':\n                    return new Array('jpg', 'rgb(233, 30, 99)');\n                    break;\n                case 'ppt':\n                    return new Array('ppt', 'rgb(244, 67, 54)');\n                    break;\n                case 'pptx':\n                    return new Array('ppt', 'rgb(244, 67, 54)');\n                    break;\n                case 'key':\n                    return new Array('ppt', 'rgb(244, 67, 54)');\n                    break;\n                case 'doc':\n                    return new Array('word', 'rgb(3, 169, 244)');\n                    break;\n                case 'docx':\n                    return new Array('word', 'rgb(3, 169, 244)');\n                    break;\n                case 'xlsx':\n                    return new Array('excel', 'rgb(76, 175, 80)');\n                    break;\n                case 'xls':\n                    return new Array('excel', 'rgb(76, 175, 80)');\n                    break;\n                case 'png':\n                    return new Array('jpg', 'rgb(233, 30, 99)');\n                    break;\n                case 'zip':\n                    return new Array('text', 'rgb(96, 125, 139)');\n                    break;\n                case 'rar':\n                    return new Array('text', 'rgb(96, 125, 139)');\n                    break;\n                default:\n                    return new Array('unknown', 'rgb(158, 158, 158)');\n                    break;\n            }\n        },\n        //开启 markdown，提交时将内容渲染为 html\n        handle_markdown() {\n            if (this.mes_input.markdown.status) {\n                this.mes_input.markdown.status = false;\n                this.mes_input.markdown.btn = 'default';\n            } else {\n                this.mes_input.markdown.status = true;\n                this.mes_input.markdown.btn = 'primary';\n            }\n        },\n        //处理内容段(markdown 内容最后会误增加一个 \\n 回车，在此与 \\n 换行一起处理)\n        process_content(content) {\n            if (content.charAt(content.length - 1) == '\\n') {\n                return content.substr(0, content.length - 2).replace(/\\n/g, '<br/>');\n            } else {\n                return content.replace(/\\n/g, '<br/>');\n            }\n        },\n        view_user_info(id) {\n            this.view.visible = true;\n            this.spinning.drawer = true;\n            axios.get('../interact/select_users.php?type=name&form=all&id=' + id)\n                .then(resp => {\n                    this.opened_member_info.info = resp.data[0];\n                    this.check_mark(id, 'user'); //判断是否收藏用户\n                    this.status.info = true;\n                    this.spinning.drawer = false;\n                })\n        },\n        view_close() {\n            this.view.visible = false;\n        },\n        //处理修改用户信息\n        handle_edit_submit() {\n            this.edit.confirm_edit_loading = true;\n\n            var query_string = \"user=\" + this.user.id + \"&name=\" + encodeURIComponent(this.edit.name) + \"&class_id=\" + this.opened_mes_info.class_id + \"&thread_id=\" + this.opened_mes_info.thread_id;\n\n            axios.post(\n                    '../interact/edit_thread.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.edit.confirm_edit_loading = false;\n                        this.handle_edit_cancel();\n                        this.opened_mes_info.thread_info.name = this.edit.name;\n                        this.opened_thread_info[this.opened_mes_info.index].name = this.edit.name;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.edit.confirm_edit_loading = false;\n                    }\n                })\n\n\n        },\n        //关闭 modal\n        handle_edit_cancel() {\n            this.edit.visible = false;\n        },\n        //删除标记\n        delete_thread() {\n            this.$confirm({\n                title: 'Do you want to delete this thread?',\n                content: 'the process can not be redone',\n                onOk() {\n\n                    var query_string = \"super=\" + antd.user.id + \"&class_id=\" + antd.opened_mes_info.class_id + \"&thread_id=\" + antd.opened_mes_info.thread_id;\n\n                    axios.post(\n                            '../interact/delete_thread.php',\n                            query_string\n                        )\n                        .then(res => {\n                            if (res.data.status) {\n                                antd.$message.success(res.data.mes);\n                                antd.status.chat = false;\n                                //移除当前加深\n                                $('.center .class-item').each(function () {\n                                    $(this).removeClass('clicked');\n                                });\n                                //重新获取 threads 列表\n                                antd.spinning.center = true;\n                                axios.get('../interact/select_thread.php?class_id=' + antd.opened_mes_info.class_id)\n                                    .then(resp => {\n                                        antd.status.mark = false;\n                                        antd.opened_thread_info = resp.data;\n                                        antd.spinning.center = false;\n                                    })\n                            } else {\n                                antd.$message.error(res.data.mes);\n                            }\n                        })\n\n                }\n            })\n\n        },\n        comment_action: function (event) {\n            event.currentTarget.className += ' mes-display';\n        },\n        comment_action_leave(event) {\n            event.currentTarget.className = 'mes-stream';\n        },\n        add_emoji(type, mes_id, index) {\n            if (this.emoji_added_count < 20) {\n                this.emoji_added_count += 1;\n\n                var query_string = \"mes_id=\" + mes_id + \"&emoji_id=\" + type + \"&class_id=\" + this.opened_mes_info.class_id + \"&thread_id=\" + this.opened_mes_info.thread_id;\n\n                axios.post(\n                        '../interact/add_emoji.php',\n                        query_string\n                    )\n                    .then(res => {\n                        if (res.data.status) {\n                            window.ws.send('{\"action\":\"send\", \"thread_id\":' + antd.opened_mes_info.thread_id + ', \"class_id\":' + antd.opened_mes_info.class_id + ', \"speaker\":' + antd.user.id + ',\"speaker_name\":\"' + antd.user.info.name + '\",\"mes_id\":' + mes_id + ',\"emoji_type\":\"add\",\"type\":\"emoji\",\"emoji_id\":' + type + ',\"count_id\":' + (index + 1) + '}');\n                        } else {\n                            this.$message.error(res.data.mes);\n                        }\n                    })\n\n\n            } else {\n                this.$message.error('You are too emotional!');\n            }\n        },\n        remove_emoji(type, mes_id, index) {\n            if (this.emoji_removed_count < 30) {\n                this.emoji_removed_count += 1;\n\n                var query_string = \"mes_id=\" + mes_id + \"&emoji_id=\" + type + \"&class_id=\" + this.opened_mes_info.class_id + \"&thread_id=\" + this.opened_mes_info.thread_id;\n\n                axios.post(\n                        '../interact/delete_emoji.php',\n                        query_string\n                    )\n                    .then(res => {\n                        if (res.data.status) {\n                            window.ws.send('{\"action\":\"send\", \"thread_id\":' + antd.opened_mes_info.thread_id + ', \"class_id\":' + antd.opened_mes_info.class_id + ', \"speaker\":' + antd.user.id + ',\"speaker_name\":\"' + antd.user.info.name + '\",\"mes_id\":' + mes_id + ',\"emoji_type\":\"remove\",\"type\":\"emoji\",\"emoji_id\":' + type + ',\"count_id\":' + (index + 1) + '}');\n                        } else {\n                            this.$message.error(res.data.mes);\n                        }\n                    })\n\n            } else {\n                this.$message.error('You are too emotional!');\n            }\n        },\n        remove_mes(mes_id, index) {\n            this.delete_mes.id = mes_id;\n            this.delete_mes.index = index;\n            this.$confirm({\n                title: 'Do you want to delete this message?',\n                content: 'the process can not be redone',\n                onOk() {\n\n                    var query_string = \"user=\" + antd.user.id + \"&mes_id=\" + antd.delete_mes.id + \"&class_id=\" + antd.opened_mes_info.class_id + \"&thread_id=\" + antd.opened_mes_info.thread_id;\n\n                    axios.post(\n                            '../interact/delete_message.php',\n                            query_string\n                        )\n                        .then(res => {\n                            if (res.data.status) {\n                                window.ws.send('{\"action\":\"send\", \"thread_id\":' + antd.opened_mes_info.thread_id + ', \"class_id\":' + antd.opened_mes_info.class_id + ', \"speaker\":' + antd.user.id + ',\"speaker_name\":\"' + antd.user.info.name + '\",\"mes_id\":' + antd.delete_mes.id + ',\"type\":\"delete\",\"count_id\":' + (antd.delete_mes.index + 1) + '}');\n                                antd.opened_thread_info[antd.opened_mes_info.index].message_count--;\n                            } else {\n                                antd.$message.error(res.data.mes);\n                                antd.delete_mes.id = null;\n                                antd.delete_mes.index = null;\n                            }\n                        })\n                }\n            })\n\n        },\n        handle_edit_mes_submit() {\n\n            var query_string = \"content=\" + this.edit.mes.content + \"&user=\" + this.user.id + \"&mes_id=\" + this.edit.mes.id + \"&class_id=\" + this.opened_mes_info.class_id + \"&thread_id=\" + this.opened_mes_info.thread_id;\n\n            axios.post(\n                    '../interact/edit_message.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        window.ws.send('{\"action\":\"send\", \"thread_id\":' + antd.opened_mes_info.thread_id + ', \"class_id\":' + antd.opened_mes_info.class_id + ', \"speaker\":' + antd.user.id + ',\"speaker_name\":\"' + antd.user.info.name + '\",\"mes_id\":' + antd.edit.mes.id + ',\"type\":\"edit\"}');\n                        this.handle_edit_mes_cancel();\n                    } else {\n                        this.$message.error(res.data.mes);\n                    }\n                })\n        },\n        handle_edit_mes_cancel() {\n            this.edit.mes.visible = false;\n        },\n        open_mes_edit(id, content, index) {\n            this.edit.mes.id = id;\n            if (content == '') {\n                this.edit.mes.content = 'Empty Content';\n            } else {\n                this.edit.mes.content = content;\n            }\n            this.edit.mes.visible = true;\n            this.edit.mes.count_id = index;\n        },\n        open_office_preview(url, name) {\n            this.office.url = url;\n            this.office.title = name;\n            this.office.visible = true;\n        },\n        handle_office_close() {\n            this.office.visible = false;\n        },\n        if_office(name) {\n            switch (name) {\n                case 'pptx':\n                    return true;\n                    break;\n                case 'ppt':\n                    return true;\n                    break;\n                case 'doc':\n                    return true;\n                    break;\n                case 'docx':\n                    return true;\n                    break;\n                case 'xls':\n                    return true;\n                    break;\n                case 'xlsx':\n                    return true;\n                    break;\n            }\n        },\n        doneGuide(key) {\n            if (key == 1) {\n                this.guide.step = 2;\n                this.guide.title = 'Introducing Threads';\n            } else if (key == 2) {\n                this.guide.step = 3;\n                this.guide.title = 'Introducing Classes';\n            } else {\n                this.guide.visible = false;\n            }\n        },\n        same_speaker(id, index) {\n            if (index !== 0 && (id == this.opened_mes_info.meses[index - 1].speaker)) {\n                return 'border-left:2px solid #eee';\n            }\n        },\n        reverse_order(key) {\n            switch (key) {\n                case 'threads':\n                    this.opened_thread_info = this.opened_thread_info.reverse();\n                    $('.center .class-item').each(function () {\n                        $(this).removeClass('clicked');\n                    });\n                    break;\n                case 'classes':\n                    this.user.joined_classes = this.user.joined_classes.reverse();\n                    this.user.classes_info = this.user.classes_info.reverse();\n                    $('.left .class-item').each(function () {\n                        $(this).removeClass('clicked');\n                    });\n                    break;\n                case 'meses':\n                    this.opened_mes_info.meses = this.opened_mes_info.meses.reverse();\n                    break;\n            }\n        },\n        enter_send(type) {\n            if (type == 'click') {\n                $(\"#message_input\").unbind();\n                this.enter.status = false;\n                this.enter.text = 1;\n                cookie.set('pokers_sending', 1);\n            } else {\n                this.enter.status = true;\n                this.enter.text = 2;\n                cookie.set('pokers_sending', 2);\n                $(\"#message_input\").unbind();\n                //输入框监听回车发送\n                $(\"#message_input\").bind(\"keydown\", function (e) {\n                    // 兼容FF和IE和Opera    \n                    var theEvent = e || window.event;\n                    var code = theEvent.keyCode || theEvent.which || theEvent.charCode;\n                    if (code == 13) {\n                        antd.handle_input_send(antd.mes_input.type);\n                    }\n                });\n            }\n\n        },\n        check_file_selected() {\n            if (!!$(\"#upload_file\")[0]) {\n                this.check.file.status = true;\n            } else {\n                this.check.file.status = false;\n            }\n        },\n        check_image_selected() {\n            if (!!$(\"#upload_img\")[0]) {\n                this.check.img.status = true;\n            } else {\n                this.check.img.status = false;\n            }\n        },\n        //检查通知\n        check_push() {\n            if (!!cookie.get('pokers_push') && !!cookie.get('pokers_thread_count')) {\n                axios.get('../interact/check_push.php?thread_id=' + cookie.get('pokers_push') + '&thread_count=' + cookie.get('pokers_thread_count'))\n                    .then(res => {\n                        this.push.info = res.data;\n                        if (this.push.info !== null) {\n                            for (var i = 0; i < this.push.info.length; i++) {\n                                this.notify_push(this.push.info[i].classid, this.push.info[i].thread, this.push.info[i].name, this.push.info[i].diff + ' new messages');\n                                var push = cookie.get('pokers_thread_count').split('a');\n                                push[this.push.info[i].index] = this.push.info[i].count;\n                                cookie.set('pokers_thread_count', push.join('a'));\n                            }\n                        }\n                    })\n            }\n        },\n        //处理通知\n        notify_push(classid, thread) {\n            if (parseInt(this.opened_mes_info.thread_id) !== parseInt(thread)) {\n                this.push.classid = classid;\n                this.push.thread = thread;\n            }\n        },\n        view_logs(type) {\n            if (type == 'thread') {\n                if (this.user.info.type == 2) {\n                    axios.get('../interact/select_logs.php?thread_id=' + this.opened_mes_info.thread_id)\n                        .then(res => {\n                            this.opened_mes_info.logs = res.data;\n                            this.log.visible = true;\n                        })\n                } else {\n                    antd.$message.error('You are not allow to view logs');\n                }\n            } else if (type == 'class') {\n                if (this.user.info.type == 2) {\n                    axios.get('../interact/select_class_logs.php?class_id=' + this.opened_class_info.id)\n                        .then(res => {\n                            this.opened_class_info.logs = res.data;\n                            this.log.visible_class = true;\n                        })\n                } else {\n                    antd.$message.error('You are not allow to view logs');\n                }\n            }\n        },\n        class_push(id) {\n            if (id == this.push.classid) {\n                return 'border-left: 4px solid rgb(255, 193, 7)';\n            }\n        },\n        //发送内容后改变 push 的 cookie\n        push_add_one() {\n            var push_now = cookie.get('pokers_thread_count').split('a'); //获取消息数\n            var thread_now = cookie.get('pokers_push').split('a'); //获取 thread\n            var index_now = thread_now.indexOf(antd.opened_mes_info.thread_id.toString()); //获取当前 thread 所在消息数数组中的位置\n            push_now[index_now] = antd.opened_thread_info[antd.opened_mes_info.index].message_count; //改变消息数\n            cookie.set('pokers_thread_count', push_now.join('a')); //更新 cookie\n        },\n        //判断是否在班级内\n        check_leaved(speaker) {\n            if (this.opened_class_info.members.indexOf(speaker + '') > -1) {\n                return '';\n            } else {\n                return '&nbsp;<em class=\"leaved_label\">Leaved</em>'\n            }\n        },\n        //消息顶置\n        pin_mes(id, index, type) {\n            if (type == 'add') {\n                var query_string = \"user=\" + this.user.id + \"&mes_id=\" + parseInt(id) + \"&class_id=\" + this.opened_mes_info.class_id + \"&thread_id=\" + this.opened_mes_info.thread_id + \"&type=add\";\n            } else {\n                var query_string = \"user=\" + this.user.id + \"&mes_id=\" + this.thread_info.pinned.id + \"&class_id=\" + this.opened_mes_info.class_id + \"&thread_id=\" + this.opened_mes_info.thread_id + \"&type=remove\";\n            }\n            axios.post(\n                    '../interact/edit_pin.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        if (type == 'add') {\n                            this.thread_info.pinned.id = id;\n                            this.thread_info.pinned.index = index;\n                            this.thread_info.pinned.mes = this.opened_mes_info.meses[parseInt(index)].content;\n                        } else {\n                            this.close_pin('key');\n                        }\n                    } else {\n                        this.$message.error(res.data.mes);\n                    }\n                })\n        },\n        //关闭顶置显示\n        close_pin(key) {\n            this.thread_info.pinned.mes = null;\n            if (!!key) {\n                this.thread_info.pinned.id = null;\n            }\n            this.thread_info.pinned.idnex = null;\n        },\n        //关闭全部部分的 status\n        close_all_status() {\n            this.status.mark = false;\n            this.status.chat = false;\n            this.status.user = false;\n            this.status.thread = false;\n            this.status.info = false;\n        },\n        //存在顶置消息时的消息界面 container 判断\n        pin_mes_container() {\n            switch (this.mes_input.container) {\n                case 'mes-container-normal':\n                    return 'height: calc(100vh - 190px) !important;'\n                    break;\n                case 'mes-container':\n                    return 'height: calc(100vh - 300px) !important;'\n                    break;\n                default:\n                    break;\n            }\n        },\n    }\n});\n\n//# sourceURL=webpack:///./src/messages.js?");

/***/ })

/******/ });
